import java.util.*;

class Solution {
    public List<List<Integer>> getAncestors(int n, int[][] edges) {
        // Создаем список для хранения предков
        List<List<Integer>> ancestors = new ArrayList<>();
        // Создаем список смежности для графа
        ArrayList<ArrayList<Integer>> aList = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            aList.add(new ArrayList<>());
        }

        // Заполняем список смежности на основе предоставленных ребер
        for (int[] edge : edges) {
            aList.get(edge[1]).add(edge[0]); // Обратная сторона ребра
        }

        // Вычисляем предков для каждой вершины
        for (int i = 0; i < n; i++) {
            List<Integer> parentList = new ArrayList<>();
            Queue<Integer> queue = new ArrayDeque<>();
            boolean[] visited = new boolean[n];

            // Инициализируем очередь и помечаем текущую вершину как посещенную
            queue.offer(i);
            visited[i] = true;

            while (!queue.isEmpty()) {
                int node = queue.poll();

                // Перебираем всех соседей текущей вершины
                for (int neighbor : aList.get(node)) {
                    if (!visited[neighbor]) {
                        visited[neighbor] = true;
                        queue.offer(neighbor);
                        parentList.add(neighbor); // Добавляем предка
                    }
                }
            }

            // Сортируем список предков и добавляем его в список всех предков
            Collections.sort(parentList);
            ancestors.add(parentList);
        }

        return ancestors;
    }
}
